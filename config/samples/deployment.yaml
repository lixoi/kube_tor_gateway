NAME: chain
LAST DEPLOYED: Mon Oct 30 22:37:31 2023
NAMESPACE: default
STATUS: pending-install
REVISION: 1
HOOKS:
---
# Source: ovpn-route/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "chain-ovpn-route-test-connection"
  labels:
    helm.sh/chart: ovpn-route-0.1.0
    app.kubernetes.io/name: ovpn-route
    app.kubernetes.io/instance: chain
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['chain-ovpn-route:']
  restartPolicy: Never
MANIFEST:
---
# Source: ovpn-route/templates/10-namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: chain
---
# Source: ovpn-route/templates/30-ovpn-client-secrets.yaml
apiVersion: v1    
kind: Secret
metadata:
  name: chain-secret-1
  namespace: chain
type: Opaque
data:
  client.ovpn: 
---
# Source: ovpn-route/templates/30-ovpn-client-secrets.yaml
apiVersion: v1    
kind: Secret
metadata:
  name: chain-secret-2
  namespace: chain
type: Opaque
data:
  client.ovpn: 
---
# Source: ovpn-route/templates/30-ovpn-client-secrets.yaml
apiVersion: v1    
kind: Secret
metadata:
  name: chain-secret-3
  namespace: chain
type: Opaque
data:
  client.ovpn: 
---
# Source: ovpn-route/templates/40-chain.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chain-ovpn-route-client1
  namespace: chain
  labels:
    helm.sh/chart: ovpn-route-0.1.0
    app.kubernetes.io/name: ovpn-route
    app.kubernetes.io/instance: chain
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ovpn-route
      app.kubernetes.io/instance: chain
  template:
    metadata:
      annotations:
        k8s.v1.cni.cncf.io/networks: '[
          { 
            "name": "br-lan2-conf", 
            "interface": "lan2", 
            "ips": ["192.168.2.3"]
          },
	  {
            "name": "br-extrn-conf", 
            "interface": "exprt"	
            ,"ips": ["172.10.1.4"]
          }
        ]'
      labels:
        app.kubernetes.io/name: ovpn-route
        app.kubernetes.io/instance: chain
    spec:
      volumes:
        - name: cred-1
          secret:
            secretName: chain-secret-1
        - hostPath:
            path: /tmp
            type: Directory
          name: tmp
      containers:
        - name: ovpn-route-client-1
          env:
          - name: GW
            value: "172.10.1.1"
          - name: CONF
            value: "/config/client.ovpn"
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
          volumeMounts:
            - name: cred-1
              readOnly: true
              mountPath: /config
            - name: tmp
              mountPath: "/tmp"
          image: "localhost:5000/ovpn-client:v1"
          imagePullPolicy: IfNotPresent
          resources:
            {}
      nodeSelector:
        kubernetes.io/hostname: node-1
---
# Source: ovpn-route/templates/40-chain.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chain-ovpn-route-client2
  namespace: chain
  labels:
    helm.sh/chart: ovpn-route-0.1.0
    app.kubernetes.io/name: ovpn-route
    app.kubernetes.io/instance: chain
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ovpn-route
      app.kubernetes.io/instance: chain
  template:
    metadata:
      annotations:
        k8s.v1.cni.cncf.io/networks: '[
          { 
            "name": "br-lan1-conf", 
            "interface": "lan1", 
            "ips": ["192.168.1.3"]
          },
	  {
            "name": "br-lan2-conf", 
            "interface": "lan2"	
            ,"ips": ["192.168.2.2"]
          }
        ]'
      labels:
        app.kubernetes.io/name: ovpn-route
        app.kubernetes.io/instance: chain
    spec:
      volumes:
        - name: cred-2
          secret:
            secretName: chain-secret-2
        - hostPath:
            path: /tmp
            type: Directory
          name: tmp
      containers:
        - name: ovpn-route-client-2
          env:
          - name: GW
            value: "192.168.2.3"
          - name: CONF
            value: "/config/client.ovpn"
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
          volumeMounts:
            - name: cred-2
              readOnly: true
              mountPath: /config
            - name: tmp
              mountPath: "/tmp"
          image: "localhost:5000/ovpn-client:v1"
          imagePullPolicy: IfNotPresent
          resources:
            {}
      nodeSelector:
        kubernetes.io/hostname: node-1
---
# Source: ovpn-route/templates/40-chain.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chain-ovpn-route-client3
  namespace: chain
  labels:
    helm.sh/chart: ovpn-route-0.1.0
    app.kubernetes.io/name: ovpn-route
    app.kubernetes.io/instance: chain
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ovpn-route
      app.kubernetes.io/instance: chain
  template:
    metadata:
      annotations:
        k8s.v1.cni.cncf.io/networks: '[
          { 
            "name": "macvlan-intrn-conf", 
            "interface": "intrn", 
            "ips": ["172.20.1.212"]
          },
	  {
            "name": "br-lan1-conf", 
            "interface": "lan1"	
            ,"ips": ["192.168.1.2"]
          }
        ]'
      labels:
        app.kubernetes.io/name: ovpn-route
        app.kubernetes.io/instance: chain
    spec:
      volumes:
        - name: cred-3
          secret:
            secretName: chain-secret-3
        - hostPath:
            path: /tmp
            type: Directory
          name: tmp
      containers:
        - name: ovpn-route-client-3
          env:
          - name: GW
            value: "192.168.1.3"
          - name: CONF
            value: "/config/client.ovpn"
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
          volumeMounts:
            - name: cred-3
              readOnly: true
              mountPath: /config
            - name: tmp
              mountPath: "/tmp"
          image: "localhost:5000/ovpn-client:v1"
          imagePullPolicy: IfNotPresent
          resources:
            {}
      nodeSelector:
        kubernetes.io/hostname: node-1
---
# Source: ovpn-route/templates/20-bridge-extrn.yaml
apiVersion: "k8s.cni.cncf.io/v1"
kind: NetworkAttachmentDefinition
metadata:
  name: br-extrn-conf
  namespace: chain
spec:
  config: '{
      "cniVersion": "0.4.0",
      "plugins": [
        {
          "type": "bridge",
          "bridge": "extrnbr4",
          "isGateway": true,
          "isDefaultGateway": true,
          "ipMasq": true,
          "master": "ens19",
          "ipam": {
            "type": "host-local",
            "subnet": "172.10.1.0/24",
            "rangeStart": "172.10.1.3",
            "rangeEnd": "172.10.1.5",
            "gateway": "172.10.1.1"
          }
        },
        {
          "type": "firewall",
          "backend": "iptables"
        }
      ]
    }'
---
# Source: ovpn-route/templates/20-bridge-lan1.yaml
apiVersion: "k8s.cni.cncf.io/v1"
kind: NetworkAttachmentDefinition
metadata:
  name: br-lan1-conf
  namespace: chain
spec:
  config: '{
      "cniVersion": "0.4.0",
      "plugins": [
        {
          "type": "bridge",
          "bridge": "lanbr1",
          "isGateway": true,
          "isDefaultGateway": true,
          "master": "lo",
          "ipam": {
            "type": "host-local",
            "subnet": "192.168.1.0/24",
            "rangeStart": "192.168.1.2",
            "rangeEnd": "192.168.1.5",
            "gateway": "192.168.1.1"
          }
        },
        {
          "type": "firewall",
          "backend": "iptables"
        }
      ]
    }'
---
# Source: ovpn-route/templates/20-bridge-lan2.yaml
apiVersion: "k8s.cni.cncf.io/v1"
kind: NetworkAttachmentDefinition
metadata:
  name: br-lan2-conf
  namespace: chain
spec:
  config: '{
      "cniVersion": "0.4.0",
      "plugins": [
        {
          "type": "bridge",
          "bridge": "lanbr2",
          "isGateway": true,
          "isDefaultGateway": true,
          "master": "lo",
          "ipam": {
            "type": "host-local",
            "subnet": "192.168.2.0/24",
            "rangeStart": "192.168.2.2",
            "rangeEnd": "192.168.2.5",
            "gateway": "192.168.2.1"
          }
        },
        {
          "type": "firewall",
          "backend": "iptables"
        }
      ]
    }'
---
# Source: ovpn-route/templates/20-bridge-lan3.yaml
apiVersion: "k8s.cni.cncf.io/v1"
kind: NetworkAttachmentDefinition
metadata:
  name: br-lan3-conf
  namespace: chain
spec:
  config: '{
      "cniVersion": "0.4.0",
      "plugins": [
        {
          "type": "bridge",
          "bridge": "lanbr3",
          "isGateway": true,
          "isDefaultGateway": true,
          "master": "lo",
          "ipam": {
            "type": "host-local",
            "subnet": "192.168.3.0/24",
            "rangeStart": "192.168.3.2",
            "rangeEnd": "192.168.3.5",
            "gateway": "192.168.3.1"
          }
        },
        {
          "type": "firewall",
          "backend": "iptables"
        }
      ]
    }'
---
# Source: ovpn-route/templates/20-macvlan-intrn.yaml
apiVersion: "k8s.cni.cncf.io/v1"
kind: NetworkAttachmentDefinition
metadata:
  name: macvlan-intrn-conf
  namespace: chain
spec:
  config: '{
      "cniVersion": "0.3.0",
      "type": "macvlan",
      "master": "ens19",
      "mode": "bridge",
      "ipam": {
        "type": "host-local",
        "subnet": "172.20.1.0/24",
        "rangeStart": "172.20.1.210",
        "rangeEnd": "172.20.1.216",
        "routes": [
          { "dst": "0.0.0.0/0" }
        ],
        "gateway": "172.20.1.1"
      }
    }'

